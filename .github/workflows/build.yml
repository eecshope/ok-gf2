name: Push REPO

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*'

jobs:
  build:

    runs-on: windows-latest

    env:
      PYTHONIOENCODING: 'UTF-8'

    strategy:
      matrix:
        python-version: [ 3.12.6 ]

    steps:
      - name: Configure git
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global user.email "ok-oldking@users.noreply.github.com"
          git config --global user.name "ok-oldking"
          echo "action_state=yellow" >> $env:GITHUB_ENV
          echo "${{ env.action_state }}"

      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set UTF-8 encoding
        run: |
          set PYTHONIOENCODING=utf-8
          set PYTHONLEGACYWINDOWSSTDIO=utf-8
          echo PYTHONIOENCODING=utf-8 >> $GITHUB_ENV

      - name: Get last release tag
        id: last_release
        shell: pwsh
        run: |
          $CURRENT_TAG = "${{ github.event.release.tag_name }}" # Current release tag
          Write-Host "Current Tag: $CURRENT_TAG"
          
          # Get all releases from GitHub API
          $releases = Invoke-RestMethod -Headers @{Authorization = "token ${{ secrets.GITHUB_TOKEN }}"} `
                  -Uri "https://api.github.com/repos/${{ github.repository }}/releases"
          
          # Filter and sort to find the last release tag (excluding the current tag)
          $LAST_RELEASE_TAG = $releases | Where-Object {$_.tag_name -ne $CURRENT_TAG} | Sort-Object published_at -Descending | Select-Object -First 1 | Select-Object -ExpandProperty tag_name
          
          # Handle case where no previous releases
          if (-not $LAST_RELEASE_TAG) {
            Write-Host "No previous release found, defaulting to initial commit"
            $LAST_RELEASE_TAG = git rev-list --max-parents=0 HEAD
            Write-Host "Initial Commit: $LAST_RELEASE_TAG"          
          }
          
          Write-Host "Last Release Tag: $LAST_RELEASE_TAG"
          
          Write-Host "current_tag=$CURRENT_TAG" >> $env:GITHUB_OUTPUT
          Write-Host "$LAST_RELEASE_TAG=$LAST_RELEASE_TAG" >> $env:GITHUB_OUTPUT

      - name: Get commit messages
        id: COMMIT_MESSAGES
        shell: pwsh
        run: |
          $LAST_RELEASE_TAG = "${{ steps.last_release.outputs.$LAST_RELEASE_TAG }}"
          $CURRENT_TAG = "${{ steps.last_release.outputs.current_tag }}"
          Write-Host "Last Release Tag: $LAST_RELEASE_TAG"
          Write-Host "Current Tag: $CURRENT_TAG"
          $COMMIT_MESSAGES = git log --pretty=format:"%s" "$LAST_RELEASE_TAG..$CURRENT_TAG"
          Write-Host "Commit Messages:"
          Write-Host $COMMIT_MESSAGES
          Write-Host "COMMIT_MESSAGES<<EOF" >> $env:GITHUB_OUTPUT
          Write-Host $COMMIT_MESSAGES >> $env:GITHUB_OUTPUT
          Write-Host "EOF" >> $env:GITHUB_OUTPUT

      - name: Get tag name
        id: tagName
        uses: olegtarasov/get-tag@v2.1.3

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Copy ok-script lib
        run: |
          python -m ok.update.copy_ok_folder

      - name: Rename .py files to .pyx
        run: |
          Get-ChildItem -Path .\src -Recurse -Filter *.py -Exclude '__init__.py' | ForEach-Object { Rename-Item $_.FullName -NewName ($_.FullName -replace '\.py$', '.pyx') }

      - name: build cython
        run: |
          python setup.py build_ext --inplace
          Get-ChildItem -Path .\src -Recurse -Filter *.pyx | ForEach-Object { Remove-Item $_.FullName }
          Get-ChildItem -Path .\src -Recurse -Filter *.cpp | ForEach-Object { Remove-Item $_.FullName }

      - name: Run tests
        run: |
          Get-ChildItem -Path ".\tests\*.py" | ForEach-Object {
              Write-Host "Running tests in $($_.FullName)"
              python -m unittest $_.FullName
          }

      - name: Build Executable
        run: |
          echo "changes: ${{ steps.COMMIT_MESSAGES.outputs.COMMIT_MESSAGES }}
          
          python -m ok.update.package_launcher ${{ steps.tagName.outputs.tag }} deploy.txt
          Copy-Item -Path "dist" -Destination "ok-gf2" -Recurse
          7z a -t7z -r "ok-gf2-${{ steps.tagName.outputs.tag }}.7z" "ok-gf2"     
          Remove-Item -Path "ok-gf2" -Recurse -Force

        shell: pwsh

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body: |
            ok-gf2
            Updatesï¼š
            ${{ steps.COMMIT_MESSAGES.outputs.COMMIT_MESSAGES }}
          files: |
            ok-gf2-${{ steps.tagName.outputs.tag }}.7z

      - name: push to coding
        run: |
          python -m ok.update.push_repos --repos https://${{ secrets.CODING_USERNAME }}:${{ secrets.CODING_PASSWORD }}@e.coding.net/g-frfh1513/ok-wuthering-waves/ok-gf2.git --files deploy.txt --tag ${{ steps.tagName.outputs.tag }}
